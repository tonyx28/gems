{"version":3,"sources":["webpack:///webpack/bootstrap bd039e33f17fd80f6abd","webpack:///./lib/board.js","webpack:///./lib/game.js","webpack:///./lib/gem.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,kBAAkB;AACrC;AACA,qBAAqB,eAAe;AACpC,4BAA4B;AAC5B;AACA;AACA;;AAEA;AACA;;AAEA;AACA,qBAAqB,kBAAkB;AACvC,yBAAyB,eAAe;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,eAAe;AAClC;AACA,qBAAqB,kBAAkB;AACvC;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA,+BAA+B;AAC/B,uEAAuE;AACvE;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,kBAAkB;AACrC;AACA,uBAAuB,eAAe;AACtC;;AAEA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA,iCAAiC;AACjC,0EAA0E;AAC1E;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,eAAe;AAClC,uBAAuB,oBAAoB;AAC3C;AACA;AACA;;AAEA;AACA,6BAA6B,6CAA6C;AAC1E;AACA;AACA;;AAEA,mBAAmB,kBAAkB;AACrC,qBAAqB,iBAAiB;AACtC;AACA;AACA;;AAEA;AACA,2BAA2B,6CAA6C;AACxE;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA,qDAAqD,mCAAmC,EAAE;;AAE1F,mBAAmB,kBAAkB;AACrC;AACA,+BAA+B,QAAQ;AACvC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,kBAAkB;AACrC,+BAA+B,QAAQ;AACvC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,kBAAkB;AACrC,qBAAqB,eAAe;AACpC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACrRA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,sBAAsB,yDAAyD;AAC/E,sBAAsB,0DAA0D;AAChF,wBAAwB,sDAAsD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,wBAAwB;AACxB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA,2BAA2B,+BAA+B;AAC1D;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,wBAAwB;;AAExB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;;AAGA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;AC1TA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,CAAC","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap bd039e33f17fd80f6abd","const red = new Image();\nred.src = \"https://res.cloudinary.com/dogzxn5h4/image/upload/v1490979047/images/red_yrl9n3.png\";\nred.crossOrigin = 'anonymous';\nconst green = new Image();\ngreen.src = \"https://res.cloudinary.com/dogzxn5h4/image/upload/v1490979047/images/green_kjadgp.png\";\ngreen.crossOrigin = 'anonymous';\nconst blue = new Image();\nblue.src = \"https://res.cloudinary.com/dogzxn5h4/image/upload/v1490979047/images/blue_hmzor9.png\";\nblue.crossOrigin = 'anonymous';\nconst white = new Image();\nwhite.src = \"https://res.cloudinary.com/dogzxn5h4/image/upload/v1490979047/images/white_nbuppm.png\";\nwhite.crossOrigin = 'anonymous';\nconst purple = new Image();\npurple.src = \"https://res.cloudinary.com/dogzxn5h4/image/upload/v1490979047/images/purple_pzs9kv.png\";\npurple.crossOrigin = 'anonymous';\nconst yellow = new Image();\nyellow.src = \"https://res.cloudinary.com/dogzxn5h4/image/upload/v1490979047/images/yellow_g98763.png\";\nyellow.crossOrigin = 'anonymous';\nconst black = \"black\";\nconst READY = \"READY\";\nconst INIT = \"INIT\";\nconst RESOLVE = \"RESOLVE\";\n\n\nclass Board {\n  constructor(context, game) {\n    this.x = 250;\n    this.y = 113;\n    this.columns = 8;\n    this.rows= 8;\n    this.tilewidth= 40;\n    this.tileheight= 40;\n    this.tiles = [];\n    this.selectedTile= { selected: false, column: 0, row: 0 };\n    this.matches = [];\n    this.moves = 0;\n    this.context = context;\n    this.game = game;\n    this.colors = [red, green, blue, white, purple, yellow];\n  }\n\n  createNew(){\n    for (let i = 0; i < this.columns; i++) {\n      this.tiles[i] = [];\n      for (let j = 0; j < this.rows; j++) {\n        this.tiles[i][j] = { type: 0, shift:0 }\n      }\n    }\n  }\n\n  randomize() {\n    let done = false;\n\n    while (!done){\n      for (let i = 0; i < this.columns; i++) {\n          for (let j = 0; j < this.rows; j++) {\n              this.tiles[i][j].type = this.getRandomTile();\n          }\n      }\n      this.resolveMatches();\n      this.findMoves();\n      if (this.moves.length > 0){\n        done = true;\n      }\n    }\n  }\n\n  getRandomTile() {\n    return Math.floor(Math.random() * this.colors.length);\n  }\n\n  resolveMatches() {\n      this.findMatches();\n\n      while (this.matches.length > 0) {\n          this.removeMatches();\n          this.shiftTiles();\n          this.findMatches();\n      }\n  }\n\n  findMatches() {\n    this.matches = [];\n\n    for (let j = 0; j < this.rows; j++) {\n      let matchlength = 1;\n      for (let i = 0; i < this.columns; i++) {\n        let checkMatch = false;\n\n        if (i == this.columns-1) {\n          checkMatch = true;\n        } else {\n          if (this.tiles[i][j].type == this.tiles[i+1][j].type &&\n              this.tiles[i][j].type != -1) {\n            matchlength += 1;\n          } else {\n            checkMatch = true;\n          }\n        }\n\n        if (checkMatch) {\n          if (matchlength >= 3) {\n            this.matches.push({ column: i+1-matchlength, row:j,\n                                length: matchlength, horizontal: true });\n          }\n          matchlength = 1;\n        }\n      }\n    }\n\n    for (let i = 0; i < this.columns; i++) {\n        let matchlength = 1;\n        for (let j = 0; j < this.rows; j++) {\n          let checkMatch = false;\n\n          if (j == this.rows-1) {\n            checkMatch = true;\n          } else {\n            if (this.tiles[i][j].type == this.tiles[i][j+1].type &&\n                this.tiles[i][j].type != -1) {\n              matchlength += 1;\n            } else {\n              checkMatch = true;\n            }\n          }\n\n          if (checkMatch) {\n            if (matchlength >= 3) {\n              this.matches.push({ column: i, row:j+1-matchlength,\n                                  length: matchlength, horizontal: false });\n            }\n            matchlength = 1;\n          }\n        }\n    }\n  }\n\n  findMoves() {\n    this.moves = [];\n\n    for (let j = 0; j < this.rows; j++) {\n        for (let i = 0; i < this.columns-1; i++) {\n          this.swap(i, j, i+1, j);\n          this.findMatches();\n          this.swap(i, j, i+1, j);\n\n          if (this.matches.length > 0) {\n            this.moves.push({toCol: i, toRow: j, fromCol: i+1, fromRow: j});\n          }\n        }\n    }\n\n    for (let i = 0; i < this.columns; i++) {\n      for (let j = 0; j < this.rows-1; j++) {\n        this.swap(i, j, i, j+1);\n        this.findMatches();\n        this.swap(i, j, i, j+1);\n\n        if (this.matches.length > 0) {\n          this.moves.push({toCol: i, toRow: j, fromCol: i, fromRow: j+1});\n        }\n      }\n    }\n\n    this.matches = [];\n  }\n\n  loopMatches(callback) {\n    for (let i = 0; i < this.matches.length; i++) {\n      let match = this.matches[i];\n      let colOffset = 0;\n      let rowOffset = 0;\n      for (let j = 0; j < match.length; j++) {\n        callback(i, match.column + colOffset, match.row + rowOffset, match);\n\n        if (match.horizontal) {\n          colOffset++;\n        } else {\n          rowOffset++;\n        }\n      }\n    }\n  }\n\n  removeMatches() {\n    this.loopMatches((index, column, row, match) => { this.tiles[column][row].type = -1; });\n\n    for (let i = 0; i < this.columns; i++) {\n      let shift = 0;\n      for (let j = this.rows-1; j >= 0; j--) {\n        if (this.tiles[i][j].type == -1) {\n          shift++;\n          this.tiles[i][j].shift = 0;\n        } else {\n          this.tiles[i][j].shift = shift;\n        }\n      }\n    }\n  }\n\n  shiftTiles() {\n    for (let i = 0; i < this.columns; i++) {\n      for (let j = this.rows-1; j >= 0; j--) {\n        if (this.tiles[i][j].type == -1) {\n          this.tiles[i][j].type = this.getRandomTile();\n        } else {\n          let shift = this.tiles[i][j].shift;\n          if (shift > 0) {\n              this.swap(i, j, i, j+shift)\n          }\n        }\n        this.tiles[i][j].shift = 0;\n      }\n    }\n  }\n\n  renderTiles() {\n    for (let i = 0; i < this.columns; i++) {\n      for (let j = 0; j < this.rows; j++) {\n        let shift = this.tiles[i][j].shift;\n        let tile = this.getTileCoords(i, j, 0, (this.game.animationTime / this.game.animationTimetotal) * shift);\n\n        if (this.tiles[i][j].type >= 0) {\n          this.renderTile(tile.x, tile.y, this.tiles[i][j].type);\n        }\n      }\n    }\n\n    if (this.game.gamestate == RESOLVE && (this.game.animationState == 2 || this.game.animationState == 3)) {\n      let shiftX = this.game.currentMove.fromCol - this.game.currentMove.toCol;\n      let shiftY = this.game.currentMove.fromRow - this.game.currentMove.toRow;\n\n      let tile1 = this.getTileCoords(this.game.currentMove.toCol, this.game.currentMove.toRow, 0, 0);\n      let tile1Shift = this.getTileCoords(this.game.currentMove.toCol, this.game.currentMove.toRow, (this.game.animationTime / this.game.animationTimetotal) * shiftX, (this.game.animationTime / this.game.animationTimetotal) * shiftY);\n      let type1 = this.tiles[this.game.currentMove.toCol][this.game.currentMove.toRow].type;\n\n      let tile2 = this.getTileCoords(this.game.currentMove.fromCol, this.game.currentMove.fromRow, 0, 0);\n      let tile2Shift = this.getTileCoords(this.game.currentMove.fromCol, this.game.currentMove.fromRow, (this.game.animationTime / this.game.animationTimetotal) * -shiftX, (this.game.animationTime / this.game.animationTimetotal) * -shiftY);\n      let type2 = this.tiles[this.game.currentMove.fromCol][this.game.currentMove.fromRow].type;\n\n      this.renderTile(tile1.x, tile1.y, black);\n      this.renderTile(tile2.x, tile2.y, black);\n\n      if (this.game.animationState == 2) {\n        this.renderTile(tile1Shift.x, tile1Shift.y, type1);\n        this.renderTile(tile2Shift.x, tile2Shift.y, type2);\n      } else {\n        this.renderTile(tile2Shift.x, tile2Shift.y, type2);\n        this.renderTile(tile1Shift.x, tile1Shift.y, type1);\n      }\n    }\n  }\n\n  getTileCoords(col, row, coloffset, rowoffset) {\n    let x = this.x + (col + coloffset) * this.tilewidth;\n    let y = this.y + (row + rowoffset) * this.tileheight;\n    return { x: x, y: y};\n  }\n\n  renderTile(x, y, type) {\n    let gem = this.colors[type];\n\n    if (type === black){\n      this.context.fillStyle = \"#7fbfe2\";\n      this.context.fillRect(x + 2, y + 2, this.tilewidth - 4, this.tileheight - 4);\n    } else {\n      this.context.drawImage(gem, x, y, this.tilewidth, this.tileheight);\n    }\n  }\n\n  swap(x1, y1, x2, y2) {\n    let typeswap = this.tiles[x1][y1].type;\n    this.tiles[x1][y1].type = this.tiles[x2][y2].type;\n    this.tiles[x2][y2].type = typeswap;\n  }\n}\n\nmodule.exports = Board;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/board.js\n// module id = 0\n// module chunks = 0","const Board = require(\"./board\");\nconst READY = \"READY\";\nconst INIT = \"INIT\";\nconst RESOLVE = \"RESOLVE\";\n\nclass Game {\n  constructor(context) {\n    this.lastTime = 0;\n    this.drag = false;\n    // this.gamestates = { init: 0, ready: 1, resolve: 2 };\n    this.gamestate = INIT;\n    this.showmoves = false;\n    this.gameover = false;\n    this.buttons = [ { x: 30, y: 240, width: 150, height: 50, text: \"New Game\"},\n                     { x: 30, y: 300, width: 150, height: 50, text: \"Enable AI\"}];\n                    // { x: 30, y: 360, width: 150, height: 50, text: \"About\"}];\n    this.animationTime = 0;\n    this.animationState = 0;\n    this.animationTimetotal = 0.3;\n    this.ai = false;\n    this.score = 0;\n    this.context = context;\n    this.board = new Board(this.context, this);\n    this.mousetarget = { valid: false, x: 0, y: 0 };\n    this.currentMove = { toCol: 0, toRow: 0, fromCol: 0, fromRow: 0 };\n    this.setup();\n  }\n\n  setup() {\n    canvas.addEventListener(\"mousemove\", this.onMouseMove.bind(this));\n    canvas.addEventListener(\"mousedown\", this.onMouseDown.bind(this));\n    canvas.addEventListener(\"mouseup\", this.onMouseUp.bind(this));\n    canvas.addEventListener(\"mouseout\", this.onMouseOut.bind(this));\n\n    this.board.createNew();\n\n    this.newGame();\n  }\n\n  start(time) {\n    // console.log(time);\n\n    this.update(time);\n    this.render();\n    window.requestAnimationFrame(this.start.bind(this));\n  }\n\n  update(time) {\n    const timeDelta = (time - this.lastTime) / 1000;\n    // console.log(timeDelta);\n    this.lastTime = time;\n\n    if (this.gamestate == READY) {\n      if (this.board.moves.length <= 0) {\n        this.gameover = true;\n      }\n\n      if (this.ai) {\n        this.animationTime += timeDelta;\n        if (this.animationTime > this.animationTimetotal) {\n          this.board.findMoves();\n\n          if (this.board.moves.length > 0) {\n            let move = this.board.moves[Math.floor(Math.random() * this.board.moves.length)];\n\n            this.swapTiles(move.toCol, move.toRow, move.fromCol, move.fromRow);\n          }\n          this.animationTime = 0;\n        }\n      }\n    } else if (this.gamestate == RESOLVE) {\n      this.animationTime += timeDelta;\n\n      if (this.animationState == 0) {\n        if (this.animationTime > this.animationTimetotal) {\n          this.board.findMatches();\n\n          if (this.board.matches.length > 0) {\n            for (let i = 0; i < this.board.matches.length; i++) {\n              this.score += 100 * (this.board.matches[i].length - 2);\n            }\n\n            this.board.removeMatches();\n            this.animationState = 1;\n          } else {\n            this.gamestate = READY;\n          }\n\n          this.animationTime = 0;\n        }\n      } else if (this.animationState == 1) {\n        if (this.animationTime > this.animationTimetotal) {\n          this.board.shiftTiles();\n          this.animationState = 0;\n          this.animationTime = 0;\n          this.board.findMatches();\n\n          if (this.board.matches.length <= 0) {\n            this.gamestate = READY;\n          }\n        }\n      } else if (this.animationState == 2) {\n        if (this.animationTime > this.animationTimetotal) {\n          this.board.swap(this.currentMove.toCol, this.currentMove.toRow, this.currentMove.fromCol, this.currentMove.fromRow);\n          this.board.findMatches();\n\n          if (this.board.matches.length > 0) {\n            this.animationState = 0;\n            this.animationTime = 0;\n            this.gamestate = RESOLVE;\n          } else {\n            this.animationState = 3;\n            this.animationTime = 0;\n          }\n\n          this.board.findMoves();\n          this.board.findMatches();\n        }\n      } else if (this.animationState == 3) {\n        if (this.animationTime > this.animationTimetotal) {\n          this.board.swap(this.currentMove.toCol, this.currentMove.toRow, this.currentMove.fromCol, this.currentMove.fromRow);\n\n          this.gamestate = READY;\n        }\n      }\n\n      this.board.findMoves();\n      this.board.findMatches();\n    }\n  }\n\n  renderText(text, x, y, width) {\n    let textSize = this.context.measureText(text);\n    let padding = (width-textSize.width)/2\n    this.context.fillText(text, x + padding, y);\n  }\n\n  render() {\n    this.context.fillStyle = \"#000000\";\n    this.context.fillRect(60,this.board.y+13,89,64);\n    this.context.fillStyle = \"#7fbfe2\";\n    this.context.fillRect(62,this.board.y+15,85,60);\n    this.context.fillStyle = \"#000000\";\n    this.context.font = \"24px Verdana\";\n    this.renderText(\"Score:\", 30, this.board.y+40, 150);\n    this.renderText(this.score, 30, this.board.y+70, 150);\n\n    this.renderButtons();\n\n    let boardwidth = this.board.columns * this.board.tilewidth;\n    let boardheight = this.board.rows * this.board.tileheight;\n\n    this.context.fillStyle = \"#000000\";\n    this.context.fillRect(this.board.x - 6, this.board.y - 6, boardwidth + 12, boardheight + 12);\n    this.context.fillStyle = \"#7fbfe2\";\n    this.context.fillRect(this.board.x - 4, this.board.y - 4, boardwidth + 8, boardheight + 8);\n\n    this.board.renderTiles();\n\n    if (this.showmoves && this.board.matches.length <= 0 && this.gamestate == READY) {\n      this.board.renderMoves();\n    }\n\n    if (this.gameover) {\n      this.context.fillStyle = \"rgba(0, 0, 0, 0.8)\";\n      this.context.fillRect(this.board.x, this.board.y, boardwidth, boardheight);\n\n      this.context.fillStyle = \"#ffffff\";\n      this.context.font = \"24px Verdana\";\n      this.renderText(\"Game Over!\", this.board.x, this.board.y + boardheight / 2 + 10, boardwidth);\n    }\n  }\n\n  renderButtons() {\n    for (let i = 0; i < this.buttons.length; i++) {\n      this.context.fillStyle = \"#000000\";\n      this.context.fillRect(this.buttons[i].x - 2, this.buttons[i].y - 2, this.buttons[i].width + 4, this.buttons[i].height + 4);\n      this.context.fillStyle = \"#85b1f7\";\n      this.context.fillRect(this.buttons[i].x, this.buttons[i].y, this.buttons[i].width, this.buttons[i].height);\n\n      this.context.fillStyle = \"#ffffff\";\n      this.context.font = \"18px Verdana\";\n      let textdim = this.context.measureText(this.buttons[i].text);\n      this.context.fillText(this.buttons[i].text, this.buttons[i].x + (this.buttons[i].width-textdim.width)/2, this.buttons[i].y+30);\n    }\n  }\n\n  newGame() {\n    this.score = 0;\n\n    this.gamestate = READY;\n    this.gameover = false;\n\n    this.board.randomize();\n    this.board.findMoves();\n    this.board.findMatches();\n  }\n\n  getMouseTile(pos) {\n    let tileX = Math.floor((pos.x - this.board.x) / this.board.tilewidth);\n    let tileY = Math.floor((pos.y - this.board.y) / this.board.tileheight);\n\n    if (tileX >= 0 && tileX < this.board.columns && tileY >= 0 && tileY < this.board.rows) {\n      return {\n        valid: true,\n        x: tileX,\n        y: tileY\n      };\n    }\n\n    return {\n      valid: false,\n      x: 0,\n      y: 0\n    };\n  }\n\n  checkSwap(x1, y1, x2, y2) {\n    if ((Math.abs(x1 - x2) == 1 && y1 == y2) ||\n        (Math.abs(y1 - y2) == 1 && x1 == x2)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  swapTiles(col1, row1, col2, row2) {\n    this.currentMove = {toCol: col1, toRow: row1, fromCol: col2, fromRow: row2};\n\n    this.board.selectedTile.selected = false;\n    this.animationState = 2;\n    this.animationTime = 0;\n    this.gamestate = RESOLVE;\n  }\n\n  onMouseMove(e) {\n    let pos = this.getMousePos(canvas, e);\n\n    if (this.drag && this.board.selectedTile.selected) {\n      this.mousetarget = this.getMouseTile(pos);\n      if (this.mousetarget.valid) {\n        if (this.checkSwap(this.mousetarget.x, this.mousetarget.y, this.board.selectedTile.column, this.board.selectedTile.row)){\n          this.swapTiles(this.mousetarget.x, this.mousetarget.y, this.board.selectedTile.column, this.board.selectedTile.row);\n        }\n      }\n    }\n  }\n\n  onMouseDown(e) {\n    let pos = this.getMousePos(canvas, e);\n\n    if (!this.drag) {\n      this.mousetarget = this.getMouseTile(pos);\n\n      if (this.mousetarget.valid) {\n        let swapped = false;\n        if (this.board.selectedTile.selected) {\n          if (this.mousetarget.x == this.board.selectedTile.column && this.mousetarget.y == this.board.selectedTile.row) {\n            this.board.selectedTile.selected = false;\n            this.drag = true;\n            return;\n          } else if (this.checkSwap(this.mousetarget.x, this.mousetarget.y, this.board.selectedTile.column, this.board.selectedTile.row)){\n            this.swapTiles(this.mousetarget.x, this.mousetarget.y, this.board.selectedTile.column, this.board.selectedTile.row);\n            swapped = true;\n          }\n        }\n\n        if (!swapped) {\n          this.board.selectedTile.column = this.mousetarget.x;\n          this.board.selectedTile.row = this.mousetarget.y;\n          this.board.selectedTile.selected = true;\n        }\n      } else {\n        this.board.selectedTile.selected = false;\n      }\n\n      this.drag = true;\n    }\n\n\n    for (let i = 0; i < this.buttons.length; i++) {\n      if (pos.x >= this.buttons[i].x && pos.x < this.buttons[i].x + this.buttons[i].width &&\n          pos.y >= this.buttons[i].y && pos.y < this.buttons[i].y + this.buttons[i].height) {\n        if (i == 0) {\n          this.newGame();\n        } else if (i == 1) {\n          this.ai = !this.ai;\n          this.buttons[i].text = (this.ai?\"Disable\":\"Enable\") + \" AI\";\n        } else if (i == 2) {\n          // for about button\n        }\n      }\n    }\n  }\n\n  onMouseUp(e) {\n    this.drag = false;\n  }\n\n  onMouseOut(e) {\n    this.drag = false;\n  }\n\n  getMousePos(canvas, e) {\n    let rect = canvas.getBoundingClientRect();\n\n    return {\n      x: Math.round((e.clientX - rect.left)/(rect.right - rect.left)*canvas.width),\n      y: Math.round((e.clientY - rect.top)/(rect.bottom - rect.top)*canvas.height)\n    };\n  }\n\n}\n\nmodule.exports = Game;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/game.js\n// module id = 1\n// module chunks = 0","const Game = require(\"./game\");\nconst Board = require(\"./board.js\");\n\ndocument.addEventListener(\"DOMContentLoaded\", function(){\n  const canvasEl = document.getElementById(\"canvas\");\n\n  const ctx = canvasEl.getContext(\"2d\");\n  const game = new Game(ctx);\n  game.start(0);\n})\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/gem.js\n// module id = 2\n// module chunks = 0"],"sourceRoot":""}